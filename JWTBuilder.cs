using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace JWTBuilder
{
    class Program
    {
        static void Main(string[] args)
        {
            // Note: You must use your own nonce and timestamp functions.

            string client_secret = "UGzw6PB8wpKANvnYewmSREXpxtbBkjjmGP6s";

            Dictionary<string, string> header = new Dictionary<string, string>();
            header.Add("alg", "HS256");
            header.Add("typ", "JWT");
            string headerJSON = JsonConvert.SerializeObject(header);

            Console.WriteLine("Header: " + headerJSON);

            Dictionary<string, string> body = new Dictionary<string, string>();
            body.Add("client_id", "OMB_CVY_AND_5A1");
            body.Add("device_id", "54ccbe30-f561-4d56-b2f6-b7d2d39af1d3");
            body.Add("grant_type", "password");
            body.Add("nonce", "htvm4vdgrh6smovi65bohm4cen");
            body.Add("password", "1234567890");
            body.Add("scope", "onstar gmoc commerce user_trailer msso");
            body.Add("timestamp", "2021-05-12T04:56:36.358Z");
            body.Add("username", "random@test.com");
            string bodyJSON = JsonConvert.SerializeObject(body);

            Console.WriteLine("Body: " + bodyJSON);


            Console.Write("\n\n");

            string payload = Base64UrlEncode(headerJSON) + "." + Base64UrlEncode(bodyJSON);
            string hmac = GetHash(payload, client_secret);

            string JWT = payload + "." + hmac;
            Console.WriteLine(JWT);

            


        }



        static string Base64UrlEncode(string input)
        {
            var inputBytes = System.Text.Encoding.UTF8.GetBytes(input);
            // Special "url-safe" base64 encode.
            return Convert.ToBase64String(inputBytes)
              .Replace('+', '-')
              .Replace('/', '_')
              .Replace("=", "");
        }

        static string Base64UrlEncode(byte[] input)
        {
            var output = Convert.ToBase64String(input);
            output = output.Split('=')[0]; // Remove any trailing '='s
            output = output.Replace('+', '-'); // 62nd char of encoding
            output = output.Replace('/', '_'); // 63rd char of encoding
            return output;
        }


        public static String GetHash(String text, String key)
        {
            
            System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

            Byte[] textBytes = encoding.GetBytes(text);
            Byte[] keyBytes = encoding.GetBytes(key);

            Byte[] hashBytes;

            using (HMACSHA256 hash = new HMACSHA256(keyBytes))
                hashBytes = hash.ComputeHash(textBytes);

            return Base64UrlEncode(hashBytes);
        }


    }
}
